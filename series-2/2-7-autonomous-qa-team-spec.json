{
  "series_number": 2,
  "guide_number": "2-7",
  "title": "자율적 QA 팀 구성",
  "subtitle": "명세서로부터 Gherkin 테스트 케이스를 생성하는 QA 에이전트",
  "overview": "이 가이드는 AI 에이전트를 활용하여 자동으로 테스트 케이스를 생성하고 실행하는 QA 팀을 구성하는 방법을 다룹니다. 명세서를 기반으로 포괄적인 테스트 시나리오를 자동 생성합니다.",
  "objectives": [
    "QA 에이전트 설계 및 구현",
    "Gherkin 테스트 케이스 자동 생성 시스템 구축",
    "테스트 시나리오 자동화 및 실행",
    "커버리지 분석 및 개선 시스템 구현",
    "AI 기반 테스트 케이스 최적화"
  ],
  "prerequisites": [
    "테스트 자동화 개념 이해",
    "Gherkin 문법 숙지",
    "Python 중급 수준",
    "Selenium/Playwright 기본 지식"
  ],
  "estimated_time": "4시간",
  "difficulty": "고급",
  "template_type": "guide",
  "sections": {
    "core_concepts": [
      {
        "title": "AI 기반 테스트 생성",
        "content": "명세서를 분석하여 사용자 시나리오를 기반으로 한 테스트 케이스를 자동 생성하는 방법을 학습합니다."
      },
      {
        "title": "Gherkin 기반 테스트 설계",
        "content": "Given-When-Then 패턴을 사용하여 명확하고 실행 가능한 테스트 시나리오를 작성하는 방법을 이해합니다."
      },
      {
        "title": "테스트 커버리지 최적화",
        "content": "생성된 테스트 케이스가 충분한 커버리지를 제공하는지 분석하고 개선하는 방법을 학습합니다."
      }
    ],
    "practical_steps": [
      {
        "title": "QA 에이전트 팀 구성",
        "content": "테스트 케이스 생성, 실행, 분석을 담당하는 전문 에이전트들을 구성합니다."
      },
      {
        "title": "Gherkin 생성기 구현",
        "content": "명세서를 분석하여 Gherkin 형식의 테스트 케이스를 자동 생성하는 시스템을 구현합니다."
      },
      {
        "title": "테스트 실행 자동화",
        "content": "생성된 테스트 케이스를 자동으로 실행하고 결과를 수집하는 시스템을 구축합니다."
      },
      {
        "title": "커버리지 분석 및 개선",
        "content": "테스트 커버리지를 분석하고 부족한 부분을 자동으로 보완하는 시스템을 구현합니다."
      }
    ]
  },
  "code_examples": [
    {
      "title": "QA 에이전트 팀",
      "language": "python",
      "code": "from crewai import Agent, Task, Crew\nfrom langchain.llms import OpenAI\nimport json\n\nclass QATeam:\n    def __init__(self, openai_api_key):\n        self.llm = OpenAI(openai_api_key=openai_api_key)\n        \n        # 테스트 케이스 생성 에이전트\n        self.test_generator = Agent(\n            role='Test Case Generator',\n            goal='Generate comprehensive test cases from specifications',\n            backstory='''You are an expert QA engineer with deep knowledge of \n            test case design and Gherkin syntax. You excel at creating \n            comprehensive test scenarios that cover all edge cases.''',\n            verbose=True,\n            allow_delegation=False\n        )\n        \n        # 테스트 실행 에이전트\n        self.test_executor = Agent(\n            role='Test Executor',\n            goal='Execute test cases and analyze results',\n            backstory='''You are a senior test automation engineer specializing \n            in Selenium, Playwright, and API testing. You ensure all tests \n            run reliably and provide accurate results.''',\n            verbose=True,\n            allow_delegation=False\n        )\n        \n        # 커버리지 분석 에이전트\n        self.coverage_analyzer = Agent(\n            role='Coverage Analyzer',\n            goal='Analyze test coverage and identify gaps',\n            backstory='''You are a test coverage expert who can identify \n            untested code paths and suggest additional test cases to \n            improve overall coverage.''',\n            verbose=True,\n            allow_delegation=False\n        )\n    \n    def generate_test_cases(self, specification):\n        \"\"\"명세서로부터 테스트 케이스 생성\"\"\"\n        task = Task(\n            description=f\"\"\"\n            다음 명세서를 분석하여 Gherkin 형식의 테스트 케이스를 생성해주세요:\n            \n            {json.dumps(specification, indent=2)}\n            \n            다음 형식으로 테스트 케이스를 작성해주세요:\n            - Feature: 기능명\n            - Scenario: 시나리오명\n            - Given: 전제 조건\n            - When: 실행할 동작\n            - Then: 예상 결과\n            \n            모든 주요 사용자 시나리오와 엣지 케이스를 포함해주세요.\n            \"\"\",\n            agent=self.test_generator,\n            expected_output=\"Complete Gherkin test cases covering all scenarios\"\n        )\n        \n        crew = Crew(\n            agents=[self.test_generator],\n            tasks=[task],\n            verbose=True\n        )\n        \n        result = crew.kickoff()\n        return result"
    },
    {
      "title": "Gherkin 테스트 실행기",
      "language": "python",
      "code": "from behave import given, when, then\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nimport json\n\nclass GherkinTestRunner:\n    def __init__(self, driver_path):\n        self.driver_path = driver_path\n        self.driver = None\n    \n    def setup_driver(self):\n        \"\"\"웹드라이버 설정\"\"\"\n        options = webdriver.ChromeOptions()\n        options.add_argument('--headless')\n        options.add_argument('--no-sandbox')\n        options.add_argument('--disable-dev-shm-usage')\n        \n        self.driver = webdriver.Chrome(\n            executable_path=self.driver_path,\n            options=options\n        )\n    \n    def execute_gherkin_tests(self, gherkin_content):\n        \"\"\"Gherkin 테스트 실행\"\"\"\n        self.setup_driver()\n        \n        try:\n            # Gherkin 파일 생성\n            with open('temp_test.feature', 'w', encoding='utf-8') as f:\n                f.write(gherkin_content)\n            \n            # Behave 실행\n            result = subprocess.run(\n                ['behave', 'temp_test.feature', '--format', 'json', '--outfile', 'test_results.json'],\n                capture_output=True,\n                text=True\n            )\n            \n            # 결과 분석\n            with open('test_results.json', 'r') as f:\n                results = json.load(f)\n            \n            return self.analyze_test_results(results)\n            \n        finally:\n            if self.driver:\n                self.driver.quit()\n    \n    def analyze_test_results(self, results):\n        \"\"\"테스트 결과 분석\"\"\"\n        total_tests = len(results)\n        passed_tests = sum(1 for result in results if result['status'] == 'passed')\n        failed_tests = total_tests - passed_tests\n        \n        return {\n            'total_tests': total_tests,\n            'passed': passed_tests,\n            'failed': failed_tests,\n            'success_rate': (passed_tests / total_tests) * 100 if total_tests > 0 else 0,\n            'details': results\n        }"
    }
  ],
  "resources": [
    {
      "title": "Behave (Python BDD)",
      "url": "https://behave.readthedocs.io/"
    },
    {
      "title": "Selenium WebDriver",
      "url": "https://selenium-python.readthedocs.io/"
    },
    {
      "title": "Playwright",
      "url": "https://playwright.dev/python/"
    }
  ],
  "next_steps": [
    {
      "title": "테스트 자동화",
      "path": "2-8-test-automation.md"
    },
    {
      "title": "자가 치유 테스트의 구현",
      "path": "2-9-self-healing-tests.md"
    }
  ]
}
