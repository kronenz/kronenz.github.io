{
  "series_number": 2,
  "guide_number": "2-6",
  "title": "품질 관리 구축",
  "subtitle": "PR을 기반으로 자동 코드 리뷰를 수행하는 검증 에이전트",
  "overview": "이 가이드는 AI 에이전트가 생성한 코드를 자동으로 검토하고 품질을 보장하는 검증 시스템을 구축하는 방법을 다룹니다. 코드 리뷰, 보안 검사, 성능 분석을 자동화합니다.",
  "objectives": [
    "자동 코드 리뷰 시스템 설계 및 구현",
    "품질 기준 설정 및 검증 로직 개발",
    "보안 취약점 자동 검사 시스템 구축",
    "성능 분석 및 최적화 제안 시스템 구현",
    "AI 기반 코드 품질 평가 모델 구축"
  ],
  "prerequisites": [
    "코드 리뷰 프로세스 이해",
    "정적 분석 도구 사용 경험",
    "Python 중급 수준",
    "GitHub API 사용 경험"
  ],
  "estimated_time": "4시간",
  "difficulty": "고급",
  "template_type": "guide",
  "sections": {
    "core_concepts": [
      {
        "title": "자동 코드 리뷰의 원칙",
        "content": "AI 기반 코드 리뷰는 일관성, 정확성, 그리고 학습 가능성을 바탕으로 구축되어야 합니다."
      },
      {
        "title": "품질 지표 설계",
        "content": "코드 품질을 정량적으로 측정할 수 있는 지표들을 정의하고 측정 방법을 수립합니다."
      },
      {
        "title": "보안 검사 자동화",
        "content": "일반적인 보안 취약점을 자동으로 탐지하고 수정 제안을 제공하는 시스템을 구축합니다."
      }
    ],
    "practical_steps": [
      {
        "title": "코드 리뷰 에이전트 구축",
        "content": "GPT-5를 활용하여 코드를 분석하고 개선 제안을 생성하는 에이전트를 구축합니다."
      },
      {
        "title": "정적 분석 도구 통합",
        "content": "ESLint, Pylint, SonarQube 등의 정적 분석 도구를 통합하여 자동 검사를 수행합니다."
      },
      {
        "title": "보안 스캐너 설정",
        "content": "OWASP ZAP, Bandit 등의 보안 스캐너를 통합하여 보안 취약점을 자동으로 검사합니다."
      },
      {
        "title": "성능 분석 시스템 구현",
        "content": "코드의 성능을 분석하고 병목 지점을 식별하는 시스템을 구현합니다."
      }
    ]
  },
  "code_examples": [
    {
      "title": "코드 리뷰 에이전트",
      "language": "python",
      "code": "from crewai import Agent, Task, Crew\nfrom langchain.llms import OpenAI\nimport requests\nimport json\n\nclass CodeReviewAgent:\n    def __init__(self, openai_api_key, github_token):\n        self.llm = OpenAI(openai_api_key=openai_api_key)\n        self.github_token = github_token\n        \n        self.reviewer = Agent(\n            role='Senior Code Reviewer',\n            goal='Review code for quality, security, and best practices',\n            backstory='''You are an expert senior developer with 15+ years of experience \n            in code review. You excel at identifying bugs, security issues, \n            performance problems, and code quality issues.''',\n            verbose=True,\n            allow_delegation=False\n        )\n    \n    def review_pull_request(self, pr_number, repo_owner, repo_name):\n        \"\"\"풀 리퀘스트 리뷰 수행\"\"\"\n        # PR 정보 가져오기\n        pr_data = self.fetch_pull_request(pr_number, repo_owner, repo_name)\n        \n        # 변경된 파일들 가져오기\n        changed_files = self.fetch_changed_files(pr_number, repo_owner, repo_name)\n        \n        # 각 파일 리뷰\n        reviews = []\n        for file_info in changed_files:\n            review = self.review_file(file_info)\n            reviews.append(review)\n        \n        # 전체 리뷰 요약 생성\n        summary = self.generate_review_summary(reviews)\n        \n        # GitHub에 리뷰 제출\n        self.submit_review(pr_number, repo_owner, repo_name, summary)\n        \n        return summary\n    \n    def review_file(self, file_info):\n        \"\"\"개별 파일 리뷰\"\"\"\n        prompt = f\"\"\"\n        다음 코드를 리뷰해주세요:\n        \n        파일: {file_info['filename']}\n        변경사항: {file_info['patch']}\n        \n        다음 관점에서 리뷰해주세요:\n        1. 코드 품질 (가독성, 유지보수성)\n        2. 보안 취약점\n        3. 성능 이슈\n        4. 베스트 프랙티스 준수\n        5. 버그 가능성\n        \n        각 이슈에 대해 구체적인 개선 제안을 포함해주세요.\n        \"\"\"\n        \n        response = self.llm(prompt)\n        return {\n            'filename': file_info['filename'],\n            'review': response,\n            'issues': self.extract_issues(response)\n        }"
    },
    {
      "title": "보안 스캐너 통합",
      "language": "python",
      "code": "import subprocess\nimport json\nfrom pathlib import Path\n\nclass SecurityScanner:\n    def __init__(self, project_path):\n        self.project_path = Path(project_path)\n    \n    def run_bandit_scan(self):\n        \"\"\"Python 코드 보안 스캔\"\"\"\n        try:\n            result = subprocess.run(\n                ['bandit', '-r', str(self.project_path), '-f', 'json'],\n                capture_output=True,\n                text=True\n            )\n            \n            if result.returncode == 0:\n                return {'status': 'clean', 'issues': []}\n            else:\n                issues = json.loads(result.stdout)\n                return {'status': 'issues_found', 'issues': issues}\n        except Exception as e:\n            return {'status': 'error', 'message': str(e)}\n    \n    def run_eslint_security(self):\n        \"\"\"JavaScript 코드 보안 스캔\"\"\"\n        try:\n            result = subprocess.run(\n                ['npx', 'eslint', '--config', 'security-config.js', '--format', 'json', str(self.project_path)],\n                capture_output=True,\n                text=True\n            )\n            \n            issues = json.loads(result.stdout) if result.stdout else []\n            return {'status': 'completed', 'issues': issues}\n        except Exception as e:\n            return {'status': 'error', 'message': str(e)}\n    \n    def generate_security_report(self):\n        \"\"\"보안 스캔 결과 종합 보고서 생성\"\"\"\n        python_scan = self.run_bandit_scan()\n        js_scan = self.run_eslint_security()\n        \n        report = {\n            'timestamp': datetime.now().isoformat(),\n            'python_scan': python_scan,\n            'javascript_scan': js_scan,\n            'overall_status': 'clean' if all(\n                scan.get('status') in ['clean', 'completed'] \n                for scan in [python_scan, js_scan]\n            ) else 'issues_found'\n        }\n        \n        return report"
    }
  ],
  "resources": [
    {
      "title": "Bandit 보안 스캐너",
      "url": "https://bandit.readthedocs.io/"
    },
    {
      "title": "SonarQube",
      "url": "https://www.sonarqube.org/"
    },
    {
      "title": "OWASP ZAP",
      "url": "https://owasp.org/www-project-zap/"
    }
  ],
  "next_steps": [
    {
      "title": "자율적 QA 팀 구성",
      "path": "2-7-autonomous-qa-team.md"
    },
    {
      "title": "테스트 자동화",
      "path": "2-8-test-automation.md"
    }
  ]
}
