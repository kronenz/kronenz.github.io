{
  "series_number": 2,
  "guide_number": "2-5",
  "title": "자율적 코드 커밋 및 PR 생성",
  "subtitle": "AI 에이전트가 Git과 상호작용하는 방법",
  "overview": "이 가이드는 AI 에이전트가 Git 저장소와 상호작용하여 자동으로 코드를 커밋하고 풀 리퀘스트를 생성하는 방법을 다룹니다. 완전 자동화된 개발 워크플로우의 핵심 구성 요소입니다.",
  "objectives": [
    "Git 자동화 도구 사용법 학습",
    "브랜치 전략 및 관리 방법 이해",
    "커밋 메시지 자동 생성 시스템 구축",
    "PR 템플릿과 리뷰어 할당 자동화",
    "AI 에이전트와 Git 연동 구현"
  ],
  "prerequisites": [
    "Git 기본 명령어 숙지",
    "GitHub PR 프로세스 이해",
    "Python 중급 수준",
    "GitHub API 사용 경험"
  ],
  "estimated_time": "3시간",
  "difficulty": "중급",
  "template_type": "guide",
  "sections": {
    "core_concepts": [
      {
        "title": "Git 자동화의 핵심 원칙",
        "content": "AI 에이전트가 Git을 사용할 때는 일관성, 추적 가능성, 그리고 안전성을 보장해야 합니다."
      },
      {
        "title": "브랜치 전략 설계",
        "content": "여러 에이전트가 동시에 작업할 수 있도록 적절한 브랜치 전략을 수립합니다."
      },
      {
        "title": "커밋 메시지 표준화",
        "content": "자동 생성되는 커밋 메시지가 명확하고 일관성 있도록 표준을 수립합니다."
      }
    ],
    "practical_steps": [
      {
        "title": "Git 자동화 도구 설정",
        "content": "GitPython 또는 PyGithub를 사용하여 Git 작업을 자동화하는 도구를 설정합니다."
      },
      {
        "title": "브랜치 관리 시스템 구현",
        "content": "에이전트별로 독립적인 브랜치를 생성하고 관리하는 시스템을 구현합니다."
      },
      {
        "title": "커밋 메시지 생성기 개발",
        "content": "변경사항을 분석하여 적절한 커밋 메시지를 자동 생성하는 시스템을 개발합니다."
      },
      {
        "title": "PR 자동 생성 및 관리",
        "content": "작업 완료 시 자동으로 PR을 생성하고 적절한 리뷰어를 할당하는 시스템을 구축합니다."
      }
    ]
  },
  "code_examples": [
    {
      "title": "Git 자동화 클래스",
      "language": "python",
      "code": "import git\nfrom github import Github\nfrom datetime import datetime\nimport os\n\nclass GitAutomation:\n    def __init__(self, repo_path, github_token):\n        self.repo = git.Repo(repo_path)\n        self.github = Github(github_token)\n        self.repo_name = os.path.basename(repo_path)\n    \n    def create_feature_branch(self, feature_name, agent_name):\n        \"\"\"새로운 기능 브랜치 생성\"\"\"\n        branch_name = f\"feature/{agent_name}-{feature_name}-{datetime.now().strftime('%Y%m%d-%H%M%S')}\"\n        \n        # 메인 브랜치에서 새 브랜치 생성\n        self.repo.git.checkout('main')\n        self.repo.git.pull()\n        new_branch = self.repo.create_head(branch_name)\n        new_branch.checkout()\n        \n        return branch_name\n    \n    def commit_changes(self, files, commit_message, agent_name):\n        \"\"\"변경사항 커밋\"\"\"\n        # 파일 추가\n        for file_path in files:\n            self.repo.index.add(file_path)\n        \n        # 커밋 메시지 생성\n        full_message = f\"[{agent_name}] {commit_message}\\n\\nAuto-generated by AI agent\"\n        \n        # 커밋 실행\n        commit = self.repo.index.commit(full_message)\n        return commit\n    \n    def push_branch(self, branch_name):\n        \"\"\"브랜치를 원격 저장소에 푸시\"\"\"\n        origin = self.repo.remote('origin')\n        origin.push(branch_name)\n    \n    def create_pull_request(self, branch_name, title, description, reviewers=None):\n        \"\"\"풀 리퀘스트 생성\"\"\"\n        repo = self.github.get_repo(f\"{self.repo.remote('origin').url.split('/')[-2]}/{self.repo_name}\")\n        \n        pr = repo.create_pull(\n            title=title,\n            body=description,\n            head=branch_name,\n            base='main'\n        )\n        \n        # 리뷰어 할당\n        if reviewers:\n            pr.create_review_request(reviewers=reviewers)\n        \n        return pr"
    },
    {
      "title": "커밋 메시지 생성기",
      "language": "python",
      "code": "class CommitMessageGenerator:\n    def __init__(self, llm):\n        self.llm = llm\n    \n    def generate_commit_message(self, changed_files, diff_content):\n        \"\"\"변경사항을 분석하여 커밋 메시지 생성\"\"\"\n        prompt = f\"\"\"\n        다음 파일 변경사항을 분석하여 적절한 커밋 메시지를 생성해주세요:\n        \n        변경된 파일: {', '.join(changed_files)}\n        \n        변경 내용:\n        {diff_content}\n        \n        다음 형식으로 커밋 메시지를 작성해주세요:\n        - 첫 줄: 50자 이내의 간단한 요약\n        - 빈 줄\n        - 상세 설명 (선택사항)\n        \n        예시:\n        feat: Add user authentication system\n        \n        - Implement login/logout functionality\n        - Add JWT token management\n        - Create user session handling\n        \"\"\"\n        \n        response = self.llm(prompt)\n        return response.strip()\n    \n    def categorize_changes(self, changed_files):\n        \"\"\"변경사항을 카테고리별로 분류\"\"\"\n        categories = {\n            'feat': [],\n            'fix': [],\n            'docs': [],\n            'style': [],\n            'refactor': [],\n            'test': [],\n            'chore': []\n        }\n        \n        for file_path in changed_files:\n            if file_path.startswith('src/'):\n                categories['feat'].append(file_path)\n            elif file_path.startswith('tests/'):\n                categories['test'].append(file_path)\n            elif file_path.endswith('.md'):\n                categories['docs'].append(file_path)\n            else:\n                categories['chore'].append(file_path)\n        \n        return categories"
    }
  ],
  "resources": [
    {
      "title": "GitPython 문서",
      "url": "https://gitpython.readthedocs.io/"
    },
    {
      "title": "PyGithub 문서",
      "url": "https://pygithub.readthedocs.io/"
    },
    {
      "title": "Conventional Commits",
      "url": "https://www.conventionalcommits.org/"
    }
  ],
  "next_steps": [
    {
      "title": "품질 관리 구축",
      "path": "2-6-quality-control-setup.md"
    },
    {
      "title": "자율적 QA 팀 구성",
      "path": "2-7-autonomous-qa-team.md"
    }
  ]
}
