name: AI Development Workflow

on:
  pull_request:
    types: [opened, synchronize, closed]
  workflow_dispatch:
    inputs:
      spec_file:
        description: 'Specification file path'
        required: true
        default: 'spec.md'

jobs:
  validate-spec:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate specification
        run: |
          echo "Validating project specification..."
          
          # Check if spec.md exists
          if [ ! -f "spec.md" ]; then
            echo "❌ spec.md file not found"
            exit 1
          fi
          
          # Check if plan.md exists
          if [ ! -f "plan.md" ]; then
            echo "❌ plan.md file not found"
            exit 1
          fi
          
          # Check if tasks.md exists
          if [ ! -f "tasks.md" ]; then
            echo "❌ tasks.md file not found"
            exit 1
          fi
          
          echo "✅ All required files present"
          
          # Basic validation of spec content
          if ! grep -q "프로젝트 개요" spec.md; then
            echo "❌ spec.md missing project overview section"
            exit 1
          fi
          
          if ! grep -q "기능 요구사항" spec.md; then
            echo "❌ spec.md missing functional requirements section"
            exit 1
          fi
          
          if ! grep -q "기술 요구사항" spec.md; then
            echo "❌ spec.md missing technical requirements section"
            exit 1
          fi
          
          echo "✅ Specification validation passed"

  setup-development:
    runs-on: ubuntu-latest
    needs: validate-spec
    if: always() && needs.validate-spec.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install openai anthropic crewai langchain

      - name: Initialize development environment
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          python3 << 'EOF'
          import os
          import json
          from pathlib import Path
          
          # Create development directory structure
          dev_dirs = [
              'src',
              'tests',
              'docs',
              'scripts',
              'config',
              'data'
          ]
          
          for dir_name in dev_dirs:
              Path(dir_name).mkdir(exist_ok=True)
              print(f"Created directory: {dir_name}")
          
          # Create basic project files
          project_files = {
              'requirements.txt': '''openai>=1.0.0
anthropic>=0.7.0
crewai>=0.1.0
langchain>=0.1.0
pytest>=7.0.0
black>=23.0.0
flake8>=6.0.0
mypy>=1.0.0''',
              
              'pyproject.toml': '''[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-agent-project"
version = "0.1.0"
description = "AI Agent Development Project"
authors = [{name = "AI Agent Team", email = "team@example.com"}]
dependencies = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "crewai>=0.1.0",
    "langchain>=0.1.0"
]

[tool.black]
line-length = 88
target-version = ['py39']

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true''',
              
              'README.md': '''# AI Agent Development Project

This project is automatically generated by AI agents based on the specification.

## Getting Started

1. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

2. Set up environment variables:
   ```bash
   export OPENAI_API_KEY=your_openai_key
   export ANTHROPIC_API_KEY=your_anthropic_key
   ```

3. Run the project:
   ```bash
   python src/main.py
   ```

## Project Structure

- `src/` - Source code
- `tests/` - Test files
- `docs/` - Documentation
- `scripts/` - Utility scripts
- `config/` - Configuration files
- `data/` - Data files
          '''
          }
          
          for file_path, content in project_files.items():
              with open(file_path, 'w') as f:
                  f.write(content)
              print(f"Created file: {file_path}")
          
          print("Development environment initialized successfully")
          EOF

  generate-code:
    runs-on: ubuntu-latest
    needs: setup-development
    if: always() && needs.setup-development.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install openai anthropic crewai langchain

      - name: Generate code from specification
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          python3 << 'EOF'
          import openai
          import os
          import json
          from pathlib import Path
          
          # Initialize OpenAI client
          openai.api_key = os.getenv('OPENAI_API_KEY')
          
          # Read specification
          with open('spec.md', 'r', encoding='utf-8') as f:
              spec_content = f.read()
          
          with open('plan.md', 'r', encoding='utf-8') as f:
              plan_content = f.read()
          
          with open('tasks.md', 'r', encoding='utf-8') as f:
              tasks_content = f.read()
          
          # Generate main application code
          prompt = f"""
          Based on the following project specification, plan, and tasks, generate the main application code:
          
          Specification:
          {spec_content}
          
          Plan:
          {plan_content}
          
          Tasks:
          {tasks_content}
          
          Please generate:
          1. Main application file (src/main.py)
          2. Core business logic modules
          3. API endpoints if needed
          4. Database models if needed
          5. Configuration files
          6. Basic test files
          
          Make sure the code is:
          - Well-structured and modular
          - Follows Python best practices
          - Includes proper error handling
          - Has clear documentation
          - Is ready for immediate execution
          
          Generate each file separately with clear file paths.
          """
          
          response = openai.ChatCompletion.create(
              model="gpt-4",
              messages=[
                  {"role": "system", "content": "You are an expert Python developer AI agent. Generate high-quality, production-ready code based on project specifications."},
                  {"role": "user", "content": prompt}
              ],
              max_tokens=8000,
              temperature=0.3
          )
          
          generated_code = response.choices[0].message.content
          
          # Parse and save generated code files
          # This is a simplified version - in practice, you'd need more sophisticated parsing
          code_blocks = generated_code.split('```')
          
          for i, block in enumerate(code_blocks):
              if block.strip().startswith('python') or block.strip().startswith('py'):
                  code_content = block.strip()[6:].strip()  # Remove 'python' prefix
                  
                  # Try to extract filename from the code block
                  lines = code_content.split('\n')
                  filename = None
                  
                  for line in lines[:5]:  # Check first 5 lines for filename
                      if line.startswith('# File:') or line.startswith('# Filename:'):
                          filename = line.split(':', 1)[1].strip()
                          break
                  
                  if not filename:
                      filename = f"generated_file_{i//2}.py"
                  
                  # Ensure filename has proper path
                  if not filename.startswith('src/'):
                      filename = f"src/{filename}"
                  
                  # Save the file
                  Path(filename).parent.mkdir(parents=True, exist_ok=True)
                  with open(filename, 'w', encoding='utf-8') as f:
                      f.write(code_content)
                  
                  print(f"Generated file: {filename}")
          
          print("Code generation completed successfully")
          EOF

  run-tests:
    runs-on: ubuntu-latest
    needs: generate-code
    if: always() && needs.generate-code.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run code quality checks
        run: |
          echo "Running code quality checks..."
          
          # Run black for code formatting
          black --check src/ || echo "Code formatting issues found"
          
          # Run flake8 for linting
          flake8 src/ || echo "Linting issues found"
          
          # Run mypy for type checking
          mypy src/ || echo "Type checking issues found"
          
          echo "Code quality checks completed"

      - name: Run tests
        run: |
          echo "Running tests..."
          
          # Run pytest if test files exist
          if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
            pytest tests/ -v
          else
            echo "No test files found, skipping tests"
          fi
          
          echo "Tests completed"

  deploy:
    runs-on: ubuntu-latest
    needs: run-tests
    if: always() && needs.run-tests.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          
          # Create deployment package
          tar -czf deployment.tar.gz src/ requirements.txt README.md
          
          # In a real scenario, you would:
          # 1. Build Docker image
          # 2. Push to container registry
          # 3. Deploy to Kubernetes or cloud platform
          # 4. Run health checks
          
          echo "Deployment completed successfully"

  notify-completion:
    runs-on: ubuntu-latest
    needs: [validate-spec, setup-development, generate-code, run-tests, deploy]
    if: always()
    steps:
      - name: Notify development completion
        run: |
          echo "AI Development Workflow completed"
          
          # Add comment to PR
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -d '{
              "body": "🚀 **AI Development Workflow Completed**\n\n✅ Specification validated\n✅ Development environment set up\n✅ Code generated from specification\n✅ Tests executed\n✅ Staging deployment completed\n\n📋 **Generated Files:**\n- Main application code\n- Test files\n- Configuration files\n- Documentation\n\n🔗 **Next Steps:**\n1. Review generated code\n2. Test functionality\n3. Deploy to production\n4. Monitor performance\n\n**Status:** Ready for review and production deployment"
            }'
